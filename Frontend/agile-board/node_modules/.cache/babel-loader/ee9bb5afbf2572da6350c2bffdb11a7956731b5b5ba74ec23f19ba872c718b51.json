{"ast":null,"code":"import localforage from \"localforage\";\nexport async function getUsers(query) {\n  await fakeNetwork(`getUsers:${query}`);\n  let users = await localforage.getItem(\"users\");\n  if (!users) users = [];\n  return users('login', 'pass');\n}\nexport async function createUser() {\n  let id = Math.random().toString(36).substring(2, 9);\n  let user = {\n    id\n  };\n  let users = await getUsers();\n  users.unshift(user);\n  await set(users);\n  return user;\n}\nexport async function getUser() {\n  await fakeNetwork(`user:`);\n  let users = await localforage.getItem('users');\n  let user = users;\n  return user !== null && user !== void 0 ? user : null;\n}\nfunction set(users) {\n  return localforage.setItem('users', users);\n}\nlet fakeCanche = {};\nasync function fakeNetwork(kay) {\n  if (!kay) {\n    fakeCanche = {};\n  }\n  if (fakeCanche[kay]) {\n    return;\n  }\n  fakeCanche[kay] = true;\n  return new Promise(res => {\n    setTimeout(res, Math.random() * 800);\n  });\n}","map":{"version":3,"names":["localforage","getUsers","query","fakeNetwork","users","getItem","createUser","id","Math","random","toString","substring","user","unshift","set","getUser","setItem","fakeCanche","kay","Promise","res","setTimeout"],"sources":["C:/Users/Давуд/Desktop/Проект Agile Board/Agile Board/Frontend/agile-board/src/pages/DataUser/UserD.js"],"sourcesContent":["import localforage from \"localforage\";\r\n\r\nexport async function getUsers(query) {\r\n    await fakeNetwork(`getUsers:${query}`);\r\n    let users = await localforage.getItem(\"users\");\r\n    if (!users) users = [];\r\n    return users ('login', 'pass')\r\n  }\r\n\r\nexport async function createUser() {\r\n    let id = Math.random().toString(36).substring(2, 9)\r\n    let user = {id}\r\n    let users = await getUsers()\r\n    users.unshift(user)\r\n    await set(users)\r\n    return user\r\n}\r\n\r\nexport async function getUser() {\r\n    await fakeNetwork(`user:`)\r\n    let users = await localforage.getItem('users')\r\n    let user = users\r\n    return user ?? null\r\n}\r\n\r\nfunction set(users) {\r\n    return localforage.setItem('users', users)\r\n}\r\n\r\nlet fakeCanche = {}\r\n\r\nasync function fakeNetwork (kay) {\r\n    if (!kay) {\r\n        fakeCanche = {}\r\n    }\r\n\r\n    if (fakeCanche[kay]) {\r\n        return\r\n    }\r\n\r\n    fakeCanche[kay] = true;\r\n    return new Promise(res => {\r\n        setTimeout(res, Math.random() * 800)\r\n    })\r\n}\r\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,aAAa;AAErC,OAAO,eAAeC,QAAQA,CAACC,KAAK,EAAE;EAClC,MAAMC,WAAW,CAAE,YAAWD,KAAM,EAAC,CAAC;EACtC,IAAIE,KAAK,GAAG,MAAMJ,WAAW,CAACK,OAAO,CAAC,OAAO,CAAC;EAC9C,IAAI,CAACD,KAAK,EAAEA,KAAK,GAAG,EAAE;EACtB,OAAOA,KAAK,CAAE,OAAO,EAAE,MAAM,CAAC;AAChC;AAEF,OAAO,eAAeE,UAAUA,CAAA,EAAG;EAC/B,IAAIC,EAAE,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;EACnD,IAAIC,IAAI,GAAG;IAACL;EAAE,CAAC;EACf,IAAIH,KAAK,GAAG,MAAMH,QAAQ,CAAC,CAAC;EAC5BG,KAAK,CAACS,OAAO,CAACD,IAAI,CAAC;EACnB,MAAME,GAAG,CAACV,KAAK,CAAC;EAChB,OAAOQ,IAAI;AACf;AAEA,OAAO,eAAeG,OAAOA,CAAA,EAAG;EAC5B,MAAMZ,WAAW,CAAE,OAAM,CAAC;EAC1B,IAAIC,KAAK,GAAG,MAAMJ,WAAW,CAACK,OAAO,CAAC,OAAO,CAAC;EAC9C,IAAIO,IAAI,GAAGR,KAAK;EAChB,OAAOQ,IAAI,aAAJA,IAAI,cAAJA,IAAI,GAAI,IAAI;AACvB;AAEA,SAASE,GAAGA,CAACV,KAAK,EAAE;EAChB,OAAOJ,WAAW,CAACgB,OAAO,CAAC,OAAO,EAAEZ,KAAK,CAAC;AAC9C;AAEA,IAAIa,UAAU,GAAG,CAAC,CAAC;AAEnB,eAAed,WAAWA,CAAEe,GAAG,EAAE;EAC7B,IAAI,CAACA,GAAG,EAAE;IACND,UAAU,GAAG,CAAC,CAAC;EACnB;EAEA,IAAIA,UAAU,CAACC,GAAG,CAAC,EAAE;IACjB;EACJ;EAEAD,UAAU,CAACC,GAAG,CAAC,GAAG,IAAI;EACtB,OAAO,IAAIC,OAAO,CAACC,GAAG,IAAI;IACtBC,UAAU,CAACD,GAAG,EAAEZ,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC;EACxC,CAAC,CAAC;AACN"},"metadata":{},"sourceType":"module","externalDependencies":[]}