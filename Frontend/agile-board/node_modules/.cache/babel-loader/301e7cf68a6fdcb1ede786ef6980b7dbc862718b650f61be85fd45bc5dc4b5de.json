{"ast":null,"code":"import localforage from \"localforage\";\nexport async function getUsers(query) {\n  await fakeNetwork(`getUsers:${query}`);\n  let users = await localforage.getItem(\"users\");\n  if (!users) users = [];\n  return users;\n}\nexport async function createUser(login) {\n  await fakeNetwork(`user:${login}`);\n  let users = await localforage.getItem('users');\n  let user = users.find(user => user.login === login);\n  return user !== null && user !== void 0 ? user : null;\n}\nexport async function checkForDuplicate(login) {\n  let users = await localforage.getItem(\"users\");\n  if (!users) users = [];\n  return;\n}\nexport async function getUser(id) {\n  await fakeNetwork(`user:${id}`);\n  let users = await localforage.getItem('users');\n  let user = users.find(user => user.id === id);\n  return user !== null && user !== void 0 ? user : null;\n}\nfunction set(users) {\n  return localforage.setItem('users', users);\n}\nlet fakeCanche = {};\nasync function fakeNetwork(kay) {\n  if (!kay) {\n    fakeCanche = {};\n  }\n  if (fakeCanche[kay]) {\n    return;\n  }\n  fakeCanche[kay] = true;\n  return new Promise(res => {\n    setTimeout(res, Math.random() * 800);\n  });\n}","map":{"version":3,"names":["localforage","getUsers","query","fakeNetwork","users","getItem","createUser","login","user","find","checkForDuplicate","getUser","id","set","setItem","fakeCanche","kay","Promise","res","setTimeout","Math","random"],"sources":["C:/Users/Давуд/Desktop/Проект Agile Board/Agile Board/Frontend/agile-board/src/pages/DataUser/UserD.js"],"sourcesContent":["import localforage from \"localforage\";\r\n\r\nexport async function getUsers(query) {\r\n    await fakeNetwork(`getUsers:${query}`);\r\n    let users = await localforage.getItem(\"users\");\r\n    if (!users) users = [];\r\n    return users\r\n}\r\n\r\nexport async function createUser(login) {\r\n    await fakeNetwork(`user:${login}`)\r\n    let users = await localforage.getItem('users')\r\n    let user = users.find(user => user.login === login)\r\n    return user ?? null\r\n}\r\n\r\nexport async function checkForDuplicate(login) {\r\n    let users = await localforage.getItem(\"users\");\r\n    if (!users) users = [];\r\n    return \r\n}\r\n\r\nexport async function getUser(id) {\r\n    await fakeNetwork(`user:${id}`)\r\n    let users = await localforage.getItem('users')\r\n    let user = users.find(user => user.id === id)\r\n    return user ?? null\r\n}\r\n\r\nfunction set(users) {\r\n    return localforage.setItem('users', users)\r\n}\r\n\r\nlet fakeCanche = {}\r\n\r\nasync function fakeNetwork (kay) {\r\n    if (!kay) {\r\n        fakeCanche = {}\r\n    }\r\n\r\n    if (fakeCanche[kay]) {\r\n        return\r\n    }\r\n\r\n    fakeCanche[kay] = true;\r\n    return new Promise(res => {\r\n        setTimeout(res, Math.random() * 800)\r\n    })\r\n}\r\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,aAAa;AAErC,OAAO,eAAeC,QAAQA,CAACC,KAAK,EAAE;EAClC,MAAMC,WAAW,CAAE,YAAWD,KAAM,EAAC,CAAC;EACtC,IAAIE,KAAK,GAAG,MAAMJ,WAAW,CAACK,OAAO,CAAC,OAAO,CAAC;EAC9C,IAAI,CAACD,KAAK,EAAEA,KAAK,GAAG,EAAE;EACtB,OAAOA,KAAK;AAChB;AAEA,OAAO,eAAeE,UAAUA,CAACC,KAAK,EAAE;EACpC,MAAMJ,WAAW,CAAE,QAAOI,KAAM,EAAC,CAAC;EAClC,IAAIH,KAAK,GAAG,MAAMJ,WAAW,CAACK,OAAO,CAAC,OAAO,CAAC;EAC9C,IAAIG,IAAI,GAAGJ,KAAK,CAACK,IAAI,CAACD,IAAI,IAAIA,IAAI,CAACD,KAAK,KAAKA,KAAK,CAAC;EACnD,OAAOC,IAAI,aAAJA,IAAI,cAAJA,IAAI,GAAI,IAAI;AACvB;AAEA,OAAO,eAAeE,iBAAiBA,CAACH,KAAK,EAAE;EAC3C,IAAIH,KAAK,GAAG,MAAMJ,WAAW,CAACK,OAAO,CAAC,OAAO,CAAC;EAC9C,IAAI,CAACD,KAAK,EAAEA,KAAK,GAAG,EAAE;EACtB;AACJ;AAEA,OAAO,eAAeO,OAAOA,CAACC,EAAE,EAAE;EAC9B,MAAMT,WAAW,CAAE,QAAOS,EAAG,EAAC,CAAC;EAC/B,IAAIR,KAAK,GAAG,MAAMJ,WAAW,CAACK,OAAO,CAAC,OAAO,CAAC;EAC9C,IAAIG,IAAI,GAAGJ,KAAK,CAACK,IAAI,CAACD,IAAI,IAAIA,IAAI,CAACI,EAAE,KAAKA,EAAE,CAAC;EAC7C,OAAOJ,IAAI,aAAJA,IAAI,cAAJA,IAAI,GAAI,IAAI;AACvB;AAEA,SAASK,GAAGA,CAACT,KAAK,EAAE;EAChB,OAAOJ,WAAW,CAACc,OAAO,CAAC,OAAO,EAAEV,KAAK,CAAC;AAC9C;AAEA,IAAIW,UAAU,GAAG,CAAC,CAAC;AAEnB,eAAeZ,WAAWA,CAAEa,GAAG,EAAE;EAC7B,IAAI,CAACA,GAAG,EAAE;IACND,UAAU,GAAG,CAAC,CAAC;EACnB;EAEA,IAAIA,UAAU,CAACC,GAAG,CAAC,EAAE;IACjB;EACJ;EAEAD,UAAU,CAACC,GAAG,CAAC,GAAG,IAAI;EACtB,OAAO,IAAIC,OAAO,CAACC,GAAG,IAAI;IACtBC,UAAU,CAACD,GAAG,EAAEE,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC;EACxC,CAAC,CAAC;AACN"},"metadata":{},"sourceType":"module","externalDependencies":[]}